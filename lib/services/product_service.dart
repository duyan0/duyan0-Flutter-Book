import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:bookstore/models/product.dart';

class ProductService {
  static const String baseUrl = 'http://10.0.2.2:5070/api/SanPham';

  // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
  static Future<List<Product>> getAllProducts() async {
    try {
      print('üîç ƒêang l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m');

      final response = await http.get(
        Uri.parse(baseUrl),
        headers: {'Content-Type': 'application/json'},
      );

      print('üì• Response status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        print('üì¶ Parsed data structure: ${data.runtimeType}');

        List<Product> products = [];

        // X·ª≠ l√Ω c·∫•u tr√∫c response theo sanpham.txt
        if (data['success'] == true && data['data'] != null) {
          print('‚úÖ API tr·∫£ v·ªÅ th√†nh c√¥ng, ki·ªÉm tra c·∫•u tr√∫c data');

          if (data['data'] is Map && data['data']['\$values'] != null) {
            print('üìã Data c√≥ c·∫•u tr√∫c \$values, x·ª≠ l√Ω...');
            final List productsJson = data['data']['\$values'] as List;
            products =
                productsJson.map((json) => Product.fromJson(json)).toList();
            print('üìã ƒê√£ parse ƒë∆∞·ª£c ${products.length} s·∫£n ph·∫©m t·ª´ \$values');
          } else if (data['data'] is List) {
            print('üìã Data l√† List, s·ªë l∆∞·ª£ng: ${data['data'].length}');
            final List productsJson = data['data'] as List;
            products =
                productsJson.map((json) => Product.fromJson(json)).toList();
          }
        }

        print('üìã S·ªë l∆∞·ª£ng s·∫£n ph·∫©m t√¨m th·∫•y: ${products.length}');
        if (products.isNotEmpty) {
          print('üìö M·∫´u s·∫£n ph·∫©m ƒë·∫ßu ti√™n: ${products.first.title}');
        }

        return products;
      } else {
        print('‚ùå L·∫•y s·∫£n ph·∫©m th·∫•t b·∫°i! Status code: ${response.statusCode}');
        return [];
      }
    } catch (e) {
      print('üí• L·ªói khi l·∫•y s·∫£n ph·∫©m: $e');
      return [];
    }
  }

  // T√¨m ki·∫øm s·∫£n ph·∫©m theo t·ª´ kh√≥a
  static Future<List<Product>> searchProducts(String keyword) async {
    try {
      print('üîç ƒêang t√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi t·ª´ kh√≥a: $keyword');

      // Th·ª≠ endpoint t√¨m ki·∫øm n·∫øu c√≥
      final String searchUrl = '$baseUrl/search?keyword=$keyword';
      print('üîó Search URL: $searchUrl');

      final response = await http.get(
        Uri.parse(searchUrl),
        headers: {'Content-Type': 'application/json'},
      );

      print('üì• Response status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        List<Product> products = [];

        if (data['success'] == true && data['data'] != null) {
          if (data['data'] is Map && data['data']['\$values'] != null) {
            final List productsJson = data['data']['\$values'] as List;
            products =
                productsJson.map((json) => Product.fromJson(json)).toList();
          } else if (data['data'] is List) {
            final List productsJson = data['data'] as List;
            products =
                productsJson.map((json) => Product.fromJson(json)).toList();
          }
        }

        print('üîç T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m v·ªõi t·ª´ kh√≥a: $keyword');
        return products;
      } else {
        print('‚ùå API t√¨m ki·∫øm kh√¥ng kh·∫£ d·ª•ng, th·ª≠ ph∆∞∆°ng ph√°p l·ªçc th·ªß c√¥ng');

        // N·∫øu API t√¨m ki·∫øm kh√¥ng kh·∫£ d·ª•ng, l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v√† l·ªçc
        final allProducts = await getAllProducts();
        final keywordLower = keyword.toLowerCase();

        final filteredProducts =
            allProducts.where((product) {
              final title = product.title?.toLowerCase() ?? '';
              final description = product.description?.toLowerCase() ?? '';
              final author = product.author?.name?.toLowerCase() ?? '';
              final publisher = product.publisher?.name?.toLowerCase() ?? '';
              final category = product.category?.name?.toLowerCase() ?? '';

              return title.contains(keywordLower) ||
                  description.contains(keywordLower) ||
                  author.contains(keywordLower) ||
                  publisher.contains(keywordLower) ||
                  category.contains(keywordLower);
            }).toList();

        print(
          'üîç T√¨m th·∫•y ${filteredProducts.length} s·∫£n ph·∫©m v·ªõi t·ª´ kh√≥a: $keyword (l·ªçc th·ªß c√¥ng)',
        );
        return filteredProducts;
      }
    } catch (e) {
      print('üí• L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m: $e');
      return [];
    }
  }

  // L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
  static Future<List<Product>> getProductsByCategory(int categoryId) async {
    try {
      print('üîç ƒêang l·∫•y s·∫£n ph·∫©m theo danh m·ª•c: $categoryId');

      final String categoryUrl = '$baseUrl/category/$categoryId';
      print('üîó Category URL: $categoryUrl');

      final response = await http.get(
        Uri.parse(categoryUrl),
        headers: {'Content-Type': 'application/json'},
      );

      print('üì• Response status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        List<Product> products = [];

        if (data['success'] == true && data['data'] != null) {
          if (data['data'] is Map && data['data']['\$values'] != null) {
            final List productsJson = data['data']['\$values'] as List;
            products =
                productsJson.map((json) => Product.fromJson(json)).toList();
          } else if (data['data'] is List) {
            final List productsJson = data['data'] as List;
            products =
                productsJson.map((json) => Product.fromJson(json)).toList();
          }
        }

        print(
          'üîç T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m thu·ªôc danh m·ª•c: $categoryId',
        );
        return products;
      } else {
        print('‚ùå API danh m·ª•c kh√¥ng kh·∫£ d·ª•ng, th·ª≠ ph∆∞∆°ng ph√°p l·ªçc th·ªß c√¥ng');

        // N·∫øu API danh m·ª•c kh√¥ng kh·∫£ d·ª•ng, l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v√† l·ªçc
        final allProducts = await getAllProducts();

        final filteredProducts =
            allProducts.where((product) {
              final categoryIdStr = product.category?.id?.toString();
              return categoryIdStr == categoryId.toString();
            }).toList();

        print(
          'üîç T√¨m th·∫•y ${filteredProducts.length} s·∫£n ph·∫©m thu·ªôc danh m·ª•c: $categoryId (l·ªçc th·ªß c√¥ng)',
        );
        return filteredProducts;
      }
    } catch (e) {
      print('üí• L·ªói khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c: $e');
      return [];
    }
  }

  // L·∫•y s·∫£n ph·∫©m theo ID
  static Future<Product?> getProductById(int productId) async {
    try {
      print('üîç ƒêang l·∫•y s·∫£n ph·∫©m v·ªõi ID: $productId');

      final String productUrl = '$baseUrl/$productId';
      print('üîó Product URL: $productUrl');

      final response = await http.get(
        Uri.parse(productUrl),
        headers: {'Content-Type': 'application/json'},
      );

      print('üì• Response status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);

        if (data['success'] == true && data['data'] != null) {
          final product = Product.fromJson(data['data']);
          print('‚úÖ ƒê√£ l·∫•y th√¥ng tin s·∫£n ph·∫©m: ${product.title}');
          return product;
        }

        print('‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: $productId');
        return null;
      } else {
        print('‚ùå L·∫•y s·∫£n ph·∫©m th·∫•t b·∫°i! Status code: ${response.statusCode}');

        // Th·ª≠ ph∆∞∆°ng ph√°p l·ªçc t·ª´ danh s√°ch
        final allProducts = await getAllProducts();
        final product = allProducts.firstWhere(
          (p) => p.productId == productId,
          orElse: () => Product(),
        );

        if (product.productId != null) {
          print('‚úÖ ƒê√£ t√¨m th·∫•y s·∫£n ph·∫©m t·ª´ danh s√°ch: ${product.title}');
          return product;
        }

        return null;
      }
    } catch (e) {
      print('üí• L·ªói khi l·∫•y s·∫£n ph·∫©m theo ID: $e');
      return null;
    }
  }
}
