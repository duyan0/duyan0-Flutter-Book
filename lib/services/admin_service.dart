import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:bookstore/services/base_api_service.dart';
import 'package:shared_preferences/shared_preferences.dart';

class AdminService {
  static final AdminService _instance = AdminService._internal();
  factory AdminService() => _instance;
  AdminService._internal();

  static const String adminEndpoint = '/Admin';
  
  // L∆∞u token admin
  Future<void> _saveAdminToken(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('admin_token', token);
    await prefs.setBool('is_admin_logged_in', true);
  }
  
  // L∆∞u th√¥ng tin admin
  Future<void> _saveAdminInfo(Map<String, dynamic> adminInfo) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('admin_info', jsonEncode(adminInfo));
  }
  
  // Ki·ªÉm tra admin ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
  Future<bool> isAdminLoggedIn() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool('is_admin_logged_in') ?? false;
  }
  
  // L·∫•y token admin
  Future<String?> getAdminToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('admin_token');
  }
  
  // L·∫•y th√¥ng tin admin
  Future<Map<String, dynamic>?> getAdminInfo() async {
    final prefs = await SharedPreferences.getInstance();
    final adminInfoString = prefs.getString('admin_info');
    if (adminInfoString != null) {
      return jsonDecode(adminInfoString) as Map<String, dynamic>;
    }
    return null;
  }
  
  // ƒêƒÉng xu·∫•t admin
  Future<void> logout() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('admin_token');
    await prefs.remove('admin_info');
    await prefs.setBool('is_admin_logged_in', false);
  }
  
  // ƒêƒÉng nh·∫≠p admin
  Future<Map<String, dynamic>> login(String username, String password) async {
    try {
      print('üîê ƒêang ƒëƒÉng nh·∫≠p admin v·ªõi t√†i kho·∫£n: $username');
      
      final response = await http.post(
        Uri.parse('${BaseApiService.baseUrl}$adminEndpoint/login'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'taiKhoan': username,
          'matKhau': password,
        }),
      );
      
      print('üì° Admin Login Response: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        // Gi·∫£ ƒë·ªãnh API tr·∫£ v·ªÅ token v√† th√¥ng tin admin
        // N·∫øu API th·ª±c t·∫ø kh√°c, c·∫ßn ƒëi·ªÅu ch·ªânh code n√†y
        final token = data['token'] ?? 'dummy_token';
        
        // L∆∞u token v√† th√¥ng tin admin
        await _saveAdminToken(token);
        await _saveAdminInfo(data);
        
        print('‚úÖ ƒêƒÉng nh·∫≠p admin th√†nh c√¥ng: ${data['hoTen']}');
        
        return {
          'success': true,
          'message': 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
          'admin': data,
        };
      } else if (response.statusCode == 401) {
        print('‚ùå ƒêƒÉng nh·∫≠p admin th·∫•t b·∫°i: Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u');
        return {
          'success': false,
          'message': 'Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u',
        };
      } else {
        print('‚ùå ƒêƒÉng nh·∫≠p admin th·∫•t b·∫°i: ${response.statusCode}');
        return {
          'success': false,
          'message': 'L·ªói ƒëƒÉng nh·∫≠p: ${response.statusCode}',
        };
      }
    } catch (e) {
      print('üí• L·ªói ƒëƒÉng nh·∫≠p admin: $e');
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // L·∫•y danh s√°ch s·∫£n ph·∫©m (v·ªõi ph√¢n trang)
  Future<Map<String, dynamic>> getProducts({int page = 1, int pageSize = 10}) async {
    try {
      final response = await http.get(
        Uri.parse('${BaseApiService.baseUrl}/SanPham?page=$page&pageSize=$pageSize'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói l·∫•y danh s√°ch s·∫£n ph·∫©m: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // L·∫•y chi ti·∫øt s·∫£n ph·∫©m
  Future<Map<String, dynamic>> getProductById(int id) async {
    try {
      final response = await http.get(
        Uri.parse('${BaseApiService.baseUrl}/SanPham/$id'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói l·∫•y chi ti·∫øt s·∫£n ph·∫©m: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // Th√™m s·∫£n ph·∫©m m·ªõi
  Future<Map<String, dynamic>> createProduct(Map<String, dynamic> productData) async {
    try {
      final response = await http.post(
        Uri.parse('${BaseApiService.baseUrl}/SanPham'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
        body: jsonEncode(productData),
      );
      
      if (response.statusCode == 201 || response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
          'message': 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng',
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói th√™m s·∫£n ph·∫©m: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
  Future<Map<String, dynamic>> updateProduct(int id, Map<String, dynamic> productData) async {
    try {
      final response = await http.put(
        Uri.parse('${BaseApiService.baseUrl}/SanPham/$id'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
        body: jsonEncode(productData),
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
          'message': 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng',
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // X√≥a s·∫£n ph·∫©m
  Future<Map<String, dynamic>> deleteProduct(int id) async {
    try {
      final response = await http.delete(
        Uri.parse('${BaseApiService.baseUrl}/SanPham/$id'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
      );
      
      if (response.statusCode == 200 || response.statusCode == 204) {
        return {
          'success': true,
          'message': 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng',
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói x√≥a s·∫£n ph·∫©m: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // L·∫•y danh s√°ch ng∆∞·ªùi d√πng
  Future<Map<String, dynamic>> getUsers({int page = 1, int pageSize = 10}) async {
    try {
      final response = await http.get(
        Uri.parse('${BaseApiService.baseUrl}/KhachHang?page=$page&pageSize=$pageSize'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // L·∫•y chi ti·∫øt ng∆∞·ªùi d√πng
  Future<Map<String, dynamic>> getUserById(int id) async {
    try {
      final response = await http.get(
        Uri.parse('${BaseApiService.baseUrl}/KhachHang/$id'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói l·∫•y chi ti·∫øt ng∆∞·ªùi d√πng: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // X√≥a ng∆∞·ªùi d√πng
  Future<Map<String, dynamic>> deleteUser(int id) async {
    try {
      final response = await http.delete(
        Uri.parse('${BaseApiService.baseUrl}/KhachHang/$id'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
      );
      
      if (response.statusCode == 200 || response.statusCode == 204) {
        return {
          'success': true,
          'message': 'X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng',
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói x√≥a ng∆∞·ªùi d√πng: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // Th√™m ng∆∞·ªùi d√πng m·ªõi
  Future<Map<String, dynamic>> createUser(Map<String, dynamic> userData) async {
    try {
      final response = await http.post(
        Uri.parse('${BaseApiService.baseUrl}/KhachHang'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
        body: jsonEncode(userData),
      );
      
      if (response.statusCode == 201 || response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
          'message': 'Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng',
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói th√™m ng∆∞·ªùi d√πng: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  Future<Map<String, dynamic>> updateUser(int id, Map<String, dynamic> userData) async {
    try {
      final response = await http.put(
        Uri.parse('${BaseApiService.baseUrl}/KhachHang/$id'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
        body: jsonEncode(userData),
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
          'message': 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng',
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // L·∫•y danh s√°ch ƒë∆°n h√†ng
  Future<Map<String, dynamic>> getOrders({int page = 1, int pageSize = 10}) async {
    try {
      final response = await http.get(
        Uri.parse('${BaseApiService.baseUrl}/DonHang?page=$page&pageSize=$pageSize'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // L·∫•y chi ti·∫øt ƒë∆°n h√†ng
  Future<Map<String, dynamic>> getOrderById(int id) async {
    try {
      final response = await http.get(
        Uri.parse('${BaseApiService.baseUrl}/DonHang/$id'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói l·∫•y chi ti·∫øt ƒë∆°n h√†ng: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
  Future<Map<String, dynamic>> updateOrderStatus(int id, String status) async {
    try {
      final response = await http.put(
        Uri.parse('${BaseApiService.baseUrl}/DonHang/$id/status'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
        body: jsonEncode({'trangThai': status}),
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
          'message': 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng',
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // L·∫•y danh s√°ch danh m·ª•c
  Future<Map<String, dynamic>> getCategories() async {
    try {
      final response = await http.get(
        Uri.parse('${BaseApiService.baseUrl}/DanhMuc'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói l·∫•y danh s√°ch danh m·ª•c: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // Th√™m danh m·ª•c m·ªõi
  Future<Map<String, dynamic>> createCategory(String name) async {
    try {
      final response = await http.post(
        Uri.parse('${BaseApiService.baseUrl}/DanhMuc'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
        body: jsonEncode({'name': name}),
      );
      
      if (response.statusCode == 201 || response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
          'message': 'Th√™m danh m·ª•c th√†nh c√¥ng',
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói th√™m danh m·ª•c: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // C·∫≠p nh·∫≠t danh m·ª•c
  Future<Map<String, dynamic>> updateCategory(int id, String name) async {
    try {
      final response = await http.put(
        Uri.parse('${BaseApiService.baseUrl}/DanhMuc/$id'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
        body: jsonEncode({'name': name}),
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'data': data,
          'message': 'C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng',
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói c·∫≠p nh·∫≠t danh m·ª•c: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
  
  // X√≥a danh m·ª•c
  Future<Map<String, dynamic>> deleteCategory(int id) async {
    try {
      final response = await http.delete(
        Uri.parse('${BaseApiService.baseUrl}/DanhMuc/$id'),
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer ${await getAdminToken()}',
        },
      );
      
      if (response.statusCode == 200 || response.statusCode == 204) {
        return {
          'success': true,
          'message': 'X√≥a danh m·ª•c th√†nh c√¥ng',
        };
      } else {
        return {
          'success': false,
          'message': 'L·ªói x√≥a danh m·ª•c: ${response.statusCode}',
        };
      }
    } catch (e) {
      return {
        'success': false,
        'message': 'L·ªói: $e',
      };
    }
  }
} 